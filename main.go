package main

import (
	"kubete_torrentBot/botlogic"
	"log"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var msgs []tgbotapi.MessageConfig

var mutex sync.Mutex

func main() {
	// –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go Timer()

	// —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –ø–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É API
	bot, err := tgbotapi.NewBotAPI("7798824633:AAFd4IkF6Rfvs-Fh0h2rSytWCdKLSQJTwaM")
	if err != nil {
		log.Panic(err)
	}

	// —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
	bot.Debug = true

	// –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	updates := bot.GetUpdatesChan(u)
	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
	for {
		for update := range updates {
			// –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É
			// –±–ª–æ–∫–∏—Ä—É–µ–º —á—Ç–æ–±—ã msgs –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ

			mutex.Lock()
			if len(msgs) > 0 {
				for n, msg := range msgs {
					bot.Send(msg)
					msgs = append(msgs[:n], msgs[n+1:]...)
				}
			}
			mutex.Unlock()

			// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			if update.Message != nil {

				// –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
				log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

				// –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
				var msg tgbotapi.MessageConfig

				chat_id := update.Message.Chat.ID
				status := botlogic.Get_status(chat_id)
				command := update.Message.Command()
				args := update.Message.CommandArguments()

				// –Ω–µ –¥–∞—ë–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–µ–∏—â–≤–µ—Å—Ç–Ω—ã–º –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–º
				if status != "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π" {
					if command != "start" && command != "help" && command != "status" && command != "login" {
						command = "login"
						msg1 := tgbotapi.NewMessage(update.Message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
						bot.Send(msg1)
					}
				}

				// –∫–æ–º–º–∞–¥—ã
				switch command {
				case "start":
					start_text :=
						`–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π.
					–£–∑–Ω–∞–π—Ç–µ –æ –∫–æ–º–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥—è /help.
					–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: /login`
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, start_text)
				case "help":
					head :=
						`–í–æ—Ç —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:
					–ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ (1-7):
					/help <–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã>` + "\n"

					help1 :=
						`1. –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
					/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
					/help - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
					/status - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π/–ê–Ω–æ–Ω–∏–º–Ω—ã–π/–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
					/login - –≤—Ö–æ–¥
					/login type - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
					/logout - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
					/logout all=true - –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö`

					help2 :=
						`2. –ö–æ–º–∞–Ω–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 
					(<id> - id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ –≤–≤–æ–¥–∏—Ç–µ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—Å)
					/userList - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
					/name <id> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					/nameChange <id> - –∏–∑–º–µ–Ω–∏—Ç—å –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					/userData <id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∫—É—Ä—Å—ã, –æ—Ü–µ–Ω–∫–∏, —Ç–µ—Å—Ç—ã)
					/role <id> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—É–¥–µ–Ω—Ç/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å/–∞–¥–º–∏–Ω)
					/roleChange <id> <role> - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					/blockInfo <id> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
					/block <id> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					/unblock <id> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`

					help3 :=
						`3. –ö–æ–º–º–∞–Ω–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏
					(<id> - id –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã)
					/courseList - —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
					/course <id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ (–ù–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ, ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
					/courseChangeName <id> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
					/courseChangeInfo <id> - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
					/courseTestList <id> - —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
					/testActive <id> - –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–µ—Å—Ç
					/testActivate <id> - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç
					/testDeactivate <id> - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç
					/testAdd <id> - –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ—Å—Ç
					/testDelete <id> - —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç
					/courseStudentList <id> - —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
					/courseStudentAdd <id –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã> <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
					/courseStudentDelete <id –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã> <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –æ—Ç—á–∏—Å–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
					/courseAdd - —Å–æ–∑–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
					/courseDelete - —É–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É`

					help4 :=
						`4. –ö–æ–º–∞–Ω–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
					(<id> - id –≤–æ–ø—Ä–æ—Å–∞)
					/questList - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
					/questInfo <id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ (–ù–∞–∑–≤–∞–Ω–∏–µ, –¢–µ–∫—Å—Ç, id, –û—Ç–≤–µ—Ç)
					/questUpdate <id> - –∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å
					/questCreate - —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
					/questDelete <id> - —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç`

					help_text := head
					switch args {
					case "2":
						help_text += help2
					case "3":
						help_text += help3
					case "4":
						help_text += help4
					default:
						help_text += help1
					}

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, help_text)
				case "status":
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–°–µ–π—á–∞—Å –≤—ã "+status+" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
				case "login":
					switch args {
					case "type":
						switch status {
						case "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π":
							msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
						default:
							msg = tgbotapi.NewMessage(update.Message.Chat.ID, botlogic.Login_type(chat_id))
						}
					default:
						switch status {
						case "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π":
							keyboard := tgbotapi.NewInlineKeyboardMarkup(
								tgbotapi.NewInlineKeyboardRow(
									tgbotapi.NewInlineKeyboardButtonURL("üê±Github", "https://github.com"),
								),
								tgbotapi.NewInlineKeyboardRow(
									tgbotapi.NewInlineKeyboardButtonURL("üìï–Ø–Ω–¥–µ–∫—Å ID", "https://yandex.ru"),
								),
								tgbotapi.NewInlineKeyboardRow(
									tgbotapi.NewInlineKeyboardButtonData("üßæ–ö–æ–¥", "button_code"),
								),
							)
							msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑:")
							msg.ReplyMarkup = keyboard
						case "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π":
							msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
						case "–ê–Ω–æ–Ω–∏–º–Ω—ã–π":
							msg = tgbotapi.NewMessage(update.Message.Chat.ID, botlogic.Login(chat_id))
						}
					}
				case "logout":
					if args == "all=true" {
						msg = tgbotapi.NewMessage(update.Message.Chat.ID, botlogic.Logout_all(chat_id))
					} else {
						msg = tgbotapi.NewMessage(update.Message.Chat.ID, botlogic.Logout(chat_id))
					}
				default:
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã")
				}

				// —Ä–µ–∂–∏–º markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
				//msg.ParseMode = "markdown"
				bot.Send(msg)
				//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç

			} else if update.CallbackQuery != nil {
				// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
				callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
				if _, err := bot.Request(callback); err != nil {
					log.Panic("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:", err)
				}

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
				switch update.CallbackQuery.Data {
				case "button_code":
					msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID,
						botlogic.Login_type(update.CallbackQuery.Message.Chat.ID))
					bot.Send(msg)
				}
			}
		}
	}
}

func Timer() {
	for {
		log.Println("‚óò Timer run ‚óò")
		newtimer := time.NewTimer(60 * time.Second)

		<-newtimer.C
		log.Println("‚Ä¢ Timer stop ‚Ä¢")

		// –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É
		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞

		replies := botlogic.Entry()
		for id1, reply := range replies {
			msg := tgbotapi.NewMessage(id1, reply)
			msgs = append(msgs, msg)
		}

		//–ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
		notifications := botlogic.Alert()
		for id2, alert := range notifications {
			msg := tgbotapi.NewMessage(id2, alert)
			msgs = append(msgs, msg)
		}
		log.Println("Timer messages: ", msgs)
	}
}
